"""DFT Model.

Our  model based on the DFT Architecture. Since the DFT architecture always
returns the same result and the CCOBRA values are predictable, we are able to
implement it simply with a lookup table.

This was done as testing every single case in the sample for the publication was
too time consuming, averaging 30-60 seconds of manual work + computation for
every case. As such, we looked into how the model works and came up with a
lookup table for every variation of the question given. The lookup table was
generated by manually inputting each variation of the possible questions into
the DFT architecture and noting down the results.

Authors:
    Rabea Turon
    Yvan Satyawan <ys88@saturn.uni-freiburg.de>
"""
import ccobra
from lookupTables.single_choice import SingleChoice
from lookupTables.verification import Verification


class DynamicArchitectureModel(ccobra.CCobraModel):

    def __init__(self, name='NeuralDynamicArchitecture'):
        super(DynamicArchitectureModel, self)\
            .__init__(name, ['spatial-relational'], ['single-choice', 'verify'])

        self.single_choice = SingleChoice()
        self.verification = Verification()

    def predict(self, item, **kwargs):

        response_type = item.response_type
        choice = None

        if response_type == 'verify':
            choice = self.verification.lookup(item.task_str, item.choices_str)

        elif response_type == 'single-choice':
            direction = self.single_choice.lookup((item.task[0][0],
                                                   item.task[1][0]))
            choice = item.choices[direction]  # select the item with the index

        return choice
